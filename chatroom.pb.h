// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatroom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chatroom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chatroom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chatroom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chatroom_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chatroom_2eproto;
namespace CHATROOM {
class ChatMsgReq;
struct ChatMsgReqDefaultTypeInternal;
extern ChatMsgReqDefaultTypeInternal _ChatMsgReq_default_instance_;
class ChatMsgRsp;
struct ChatMsgRspDefaultTypeInternal;
extern ChatMsgRspDefaultTypeInternal _ChatMsgRsp_default_instance_;
class HistoryMsgRsp;
struct HistoryMsgRspDefaultTypeInternal;
extern HistoryMsgRspDefaultTypeInternal _HistoryMsgRsp_default_instance_;
class InitConnectReq;
struct InitConnectReqDefaultTypeInternal;
extern InitConnectReqDefaultTypeInternal _InitConnectReq_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class UserListRsp;
struct UserListRspDefaultTypeInternal;
extern UserListRspDefaultTypeInternal _UserListRsp_default_instance_;
}  // namespace CHATROOM
PROTOBUF_NAMESPACE_OPEN
template<> ::CHATROOM::ChatMsgReq* Arena::CreateMaybeMessage<::CHATROOM::ChatMsgReq>(Arena*);
template<> ::CHATROOM::ChatMsgRsp* Arena::CreateMaybeMessage<::CHATROOM::ChatMsgRsp>(Arena*);
template<> ::CHATROOM::HistoryMsgRsp* Arena::CreateMaybeMessage<::CHATROOM::HistoryMsgRsp>(Arena*);
template<> ::CHATROOM::InitConnectReq* Arena::CreateMaybeMessage<::CHATROOM::InitConnectReq>(Arena*);
template<> ::CHATROOM::Message* Arena::CreateMaybeMessage<::CHATROOM::Message>(Arena*);
template<> ::CHATROOM::UserListRsp* Arena::CreateMaybeMessage<::CHATROOM::UserListRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CHATROOM {

// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHATROOM.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHATROOM.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:CHATROOM.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatroom_2eproto;
};
// -------------------------------------------------------------------

class HistoryMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHATROOM.HistoryMsgRsp) */ {
 public:
  inline HistoryMsgRsp() : HistoryMsgRsp(nullptr) {}
  ~HistoryMsgRsp() override;
  explicit PROTOBUF_CONSTEXPR HistoryMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistoryMsgRsp(const HistoryMsgRsp& from);
  HistoryMsgRsp(HistoryMsgRsp&& from) noexcept
    : HistoryMsgRsp() {
    *this = ::std::move(from);
  }

  inline HistoryMsgRsp& operator=(const HistoryMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryMsgRsp& operator=(HistoryMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoryMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoryMsgRsp* internal_default_instance() {
    return reinterpret_cast<const HistoryMsgRsp*>(
               &_HistoryMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HistoryMsgRsp& a, HistoryMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HistoryMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HistoryMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HistoryMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHATROOM.HistoryMsgRsp";
  }
  protected:
  explicit HistoryMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .CHATROOM.Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::CHATROOM::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHATROOM::Message >*
      mutable_messages();
  private:
  const ::CHATROOM::Message& _internal_messages(int index) const;
  ::CHATROOM::Message* _internal_add_messages();
  public:
  const ::CHATROOM::Message& messages(int index) const;
  ::CHATROOM::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHATROOM::Message >&
      messages() const;

  // @@protoc_insertion_point(class_scope:CHATROOM.HistoryMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHATROOM::Message > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatroom_2eproto;
};
// -------------------------------------------------------------------

class UserListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHATROOM.UserListRsp) */ {
 public:
  inline UserListRsp() : UserListRsp(nullptr) {}
  ~UserListRsp() override;
  explicit PROTOBUF_CONSTEXPR UserListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserListRsp(const UserListRsp& from);
  UserListRsp(UserListRsp&& from) noexcept
    : UserListRsp() {
    *this = ::std::move(from);
  }

  inline UserListRsp& operator=(const UserListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListRsp& operator=(UserListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserListRsp* internal_default_instance() {
    return reinterpret_cast<const UserListRsp*>(
               &_UserListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserListRsp& a, UserListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UserListRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserListRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserListRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHATROOM.UserListRsp";
  }
  protected:
  explicit UserListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // repeated string user_name = 1;
  int user_name_size() const;
  private:
  int _internal_user_name_size() const;
  public:
  void clear_user_name();
  const std::string& user_name(int index) const;
  std::string* mutable_user_name(int index);
  void set_user_name(int index, const std::string& value);
  void set_user_name(int index, std::string&& value);
  void set_user_name(int index, const char* value);
  void set_user_name(int index, const char* value, size_t size);
  std::string* add_user_name();
  void add_user_name(const std::string& value);
  void add_user_name(std::string&& value);
  void add_user_name(const char* value);
  void add_user_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_name();
  private:
  const std::string& _internal_user_name(int index) const;
  std::string* _internal_add_user_name();
  public:

  // @@protoc_insertion_point(class_scope:CHATROOM.UserListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatroom_2eproto;
};
// -------------------------------------------------------------------

class ChatMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHATROOM.ChatMsgReq) */ {
 public:
  inline ChatMsgReq() : ChatMsgReq(nullptr) {}
  ~ChatMsgReq() override;
  explicit PROTOBUF_CONSTEXPR ChatMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMsgReq(const ChatMsgReq& from);
  ChatMsgReq(ChatMsgReq&& from) noexcept
    : ChatMsgReq() {
    *this = ::std::move(from);
  }

  inline ChatMsgReq& operator=(const ChatMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsgReq& operator=(ChatMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMsgReq* internal_default_instance() {
    return reinterpret_cast<const ChatMsgReq*>(
               &_ChatMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatMsgReq& a, ChatMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMsgReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHATROOM.ChatMsgReq";
  }
  protected:
  explicit ChatMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUsernameFieldNumber = 4,
    kMessageFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
    kIsPrivateFieldNumber = 3,
  };
  // string target_username = 4;
  void clear_target_username();
  const std::string& target_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_username();
  PROTOBUF_NODISCARD std::string* release_target_username();
  void set_allocated_target_username(std::string* target_username);
  private:
  const std::string& _internal_target_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_username(const std::string& value);
  std::string* _internal_mutable_target_username();
  public:

  // .CHATROOM.Message message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CHATROOM::Message& message() const;
  PROTOBUF_NODISCARD ::CHATROOM::Message* release_message();
  ::CHATROOM::Message* mutable_message();
  void set_allocated_message(::CHATROOM::Message* message);
  private:
  const ::CHATROOM::Message& _internal_message() const;
  ::CHATROOM::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CHATROOM::Message* message);
  ::CHATROOM::Message* unsafe_arena_release_message();

  // uint32 msg_type = 1;
  void clear_msg_type();
  uint32_t msg_type() const;
  void set_msg_type(uint32_t value);
  private:
  uint32_t _internal_msg_type() const;
  void _internal_set_msg_type(uint32_t value);
  public:

  // bool is_private = 3;
  void clear_is_private();
  bool is_private() const;
  void set_is_private(bool value);
  private:
  bool _internal_is_private() const;
  void _internal_set_is_private(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CHATROOM.ChatMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_username_;
  ::CHATROOM::Message* message_;
  uint32_t msg_type_;
  bool is_private_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatroom_2eproto;
};
// -------------------------------------------------------------------

class ChatMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHATROOM.ChatMsgRsp) */ {
 public:
  inline ChatMsgRsp() : ChatMsgRsp(nullptr) {}
  ~ChatMsgRsp() override;
  explicit PROTOBUF_CONSTEXPR ChatMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMsgRsp(const ChatMsgRsp& from);
  ChatMsgRsp(ChatMsgRsp&& from) noexcept
    : ChatMsgRsp() {
    *this = ::std::move(from);
  }

  inline ChatMsgRsp& operator=(const ChatMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsgRsp& operator=(ChatMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMsgRsp* internal_default_instance() {
    return reinterpret_cast<const ChatMsgRsp*>(
               &_ChatMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatMsgRsp& a, ChatMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHATROOM.ChatMsgRsp";
  }
  protected:
  explicit ChatMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // .CHATROOM.Message message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CHATROOM::Message& message() const;
  PROTOBUF_NODISCARD ::CHATROOM::Message* release_message();
  ::CHATROOM::Message* mutable_message();
  void set_allocated_message(::CHATROOM::Message* message);
  private:
  const ::CHATROOM::Message& _internal_message() const;
  ::CHATROOM::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CHATROOM::Message* message);
  ::CHATROOM::Message* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:CHATROOM.ChatMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CHATROOM::Message* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatroom_2eproto;
};
// -------------------------------------------------------------------

class InitConnectReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHATROOM.InitConnectReq) */ {
 public:
  inline InitConnectReq() : InitConnectReq(nullptr) {}
  ~InitConnectReq() override;
  explicit PROTOBUF_CONSTEXPR InitConnectReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConnectReq(const InitConnectReq& from);
  InitConnectReq(InitConnectReq&& from) noexcept
    : InitConnectReq() {
    *this = ::std::move(from);
  }

  inline InitConnectReq& operator=(const InitConnectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConnectReq& operator=(InitConnectReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitConnectReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConnectReq* internal_default_instance() {
    return reinterpret_cast<const InitConnectReq*>(
               &_InitConnectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitConnectReq& a, InitConnectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConnectReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConnectReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConnectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConnectReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitConnectReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitConnectReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitConnectReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHATROOM.InitConnectReq";
  }
  protected:
  explicit InitConnectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // @@protoc_insertion_point(class_scope:CHATROOM.InitConnectReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatroom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// string sender = 1;
inline void Message::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& Message::sender() const {
  // @@protoc_insertion_point(field_get:CHATROOM.Message.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHATROOM.Message.sender)
}
inline std::string* Message::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:CHATROOM.Message.sender)
  return _s;
}
inline const std::string& Message::_internal_sender() const {
  return sender_.Get();
}
inline void Message::_internal_set_sender(const std::string& value) {
  
  sender_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_sender() {
  
  return sender_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_sender() {
  // @@protoc_insertion_point(field_release:CHATROOM.Message.sender)
  return sender_.Release();
}
inline void Message::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault()) {
    sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHATROOM.Message.sender)
}

// string content = 2;
inline void Message::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:CHATROOM.Message.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHATROOM.Message.content)
}
inline std::string* Message::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:CHATROOM.Message.content)
  return _s;
}
inline const std::string& Message::_internal_content() const {
  return content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:CHATROOM.Message.content)
  return content_.Release();
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHATROOM.Message.content)
}

// -------------------------------------------------------------------

// HistoryMsgRsp

// repeated .CHATROOM.Message messages = 1;
inline int HistoryMsgRsp::_internal_messages_size() const {
  return messages_.size();
}
inline int HistoryMsgRsp::messages_size() const {
  return _internal_messages_size();
}
inline void HistoryMsgRsp::clear_messages() {
  messages_.Clear();
}
inline ::CHATROOM::Message* HistoryMsgRsp::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CHATROOM.HistoryMsgRsp.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHATROOM::Message >*
HistoryMsgRsp::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:CHATROOM.HistoryMsgRsp.messages)
  return &messages_;
}
inline const ::CHATROOM::Message& HistoryMsgRsp::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::CHATROOM::Message& HistoryMsgRsp::messages(int index) const {
  // @@protoc_insertion_point(field_get:CHATROOM.HistoryMsgRsp.messages)
  return _internal_messages(index);
}
inline ::CHATROOM::Message* HistoryMsgRsp::_internal_add_messages() {
  return messages_.Add();
}
inline ::CHATROOM::Message* HistoryMsgRsp::add_messages() {
  ::CHATROOM::Message* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:CHATROOM.HistoryMsgRsp.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHATROOM::Message >&
HistoryMsgRsp::messages() const {
  // @@protoc_insertion_point(field_list:CHATROOM.HistoryMsgRsp.messages)
  return messages_;
}

// -------------------------------------------------------------------

// UserListRsp

// repeated string user_name = 1;
inline int UserListRsp::_internal_user_name_size() const {
  return user_name_.size();
}
inline int UserListRsp::user_name_size() const {
  return _internal_user_name_size();
}
inline void UserListRsp::clear_user_name() {
  user_name_.Clear();
}
inline std::string* UserListRsp::add_user_name() {
  std::string* _s = _internal_add_user_name();
  // @@protoc_insertion_point(field_add_mutable:CHATROOM.UserListRsp.user_name)
  return _s;
}
inline const std::string& UserListRsp::_internal_user_name(int index) const {
  return user_name_.Get(index);
}
inline const std::string& UserListRsp::user_name(int index) const {
  // @@protoc_insertion_point(field_get:CHATROOM.UserListRsp.user_name)
  return _internal_user_name(index);
}
inline std::string* UserListRsp::mutable_user_name(int index) {
  // @@protoc_insertion_point(field_mutable:CHATROOM.UserListRsp.user_name)
  return user_name_.Mutable(index);
}
inline void UserListRsp::set_user_name(int index, const std::string& value) {
  user_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CHATROOM.UserListRsp.user_name)
}
inline void UserListRsp::set_user_name(int index, std::string&& value) {
  user_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CHATROOM.UserListRsp.user_name)
}
inline void UserListRsp::set_user_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CHATROOM.UserListRsp.user_name)
}
inline void UserListRsp::set_user_name(int index, const char* value, size_t size) {
  user_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CHATROOM.UserListRsp.user_name)
}
inline std::string* UserListRsp::_internal_add_user_name() {
  return user_name_.Add();
}
inline void UserListRsp::add_user_name(const std::string& value) {
  user_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CHATROOM.UserListRsp.user_name)
}
inline void UserListRsp::add_user_name(std::string&& value) {
  user_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CHATROOM.UserListRsp.user_name)
}
inline void UserListRsp::add_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CHATROOM.UserListRsp.user_name)
}
inline void UserListRsp::add_user_name(const char* value, size_t size) {
  user_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CHATROOM.UserListRsp.user_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserListRsp::user_name() const {
  // @@protoc_insertion_point(field_list:CHATROOM.UserListRsp.user_name)
  return user_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserListRsp::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable_list:CHATROOM.UserListRsp.user_name)
  return &user_name_;
}

// -------------------------------------------------------------------

// ChatMsgReq

// uint32 msg_type = 1;
inline void ChatMsgReq::clear_msg_type() {
  msg_type_ = 0u;
}
inline uint32_t ChatMsgReq::_internal_msg_type() const {
  return msg_type_;
}
inline uint32_t ChatMsgReq::msg_type() const {
  // @@protoc_insertion_point(field_get:CHATROOM.ChatMsgReq.msg_type)
  return _internal_msg_type();
}
inline void ChatMsgReq::_internal_set_msg_type(uint32_t value) {
  
  msg_type_ = value;
}
inline void ChatMsgReq::set_msg_type(uint32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CHATROOM.ChatMsgReq.msg_type)
}

// .CHATROOM.Message message = 2;
inline bool ChatMsgReq::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ChatMsgReq::has_message() const {
  return _internal_has_message();
}
inline void ChatMsgReq::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::CHATROOM::Message& ChatMsgReq::_internal_message() const {
  const ::CHATROOM::Message* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CHATROOM::Message&>(
      ::CHATROOM::_Message_default_instance_);
}
inline const ::CHATROOM::Message& ChatMsgReq::message() const {
  // @@protoc_insertion_point(field_get:CHATROOM.ChatMsgReq.message)
  return _internal_message();
}
inline void ChatMsgReq::unsafe_arena_set_allocated_message(
    ::CHATROOM::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHATROOM.ChatMsgReq.message)
}
inline ::CHATROOM::Message* ChatMsgReq::release_message() {
  
  ::CHATROOM::Message* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CHATROOM::Message* ChatMsgReq::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CHATROOM.ChatMsgReq.message)
  
  ::CHATROOM::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CHATROOM::Message* ChatMsgReq::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CHATROOM::Message>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::CHATROOM::Message* ChatMsgReq::mutable_message() {
  ::CHATROOM::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CHATROOM.ChatMsgReq.message)
  return _msg;
}
inline void ChatMsgReq::set_allocated_message(::CHATROOM::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CHATROOM.ChatMsgReq.message)
}

// bool is_private = 3;
inline void ChatMsgReq::clear_is_private() {
  is_private_ = false;
}
inline bool ChatMsgReq::_internal_is_private() const {
  return is_private_;
}
inline bool ChatMsgReq::is_private() const {
  // @@protoc_insertion_point(field_get:CHATROOM.ChatMsgReq.is_private)
  return _internal_is_private();
}
inline void ChatMsgReq::_internal_set_is_private(bool value) {
  
  is_private_ = value;
}
inline void ChatMsgReq::set_is_private(bool value) {
  _internal_set_is_private(value);
  // @@protoc_insertion_point(field_set:CHATROOM.ChatMsgReq.is_private)
}

// string target_username = 4;
inline void ChatMsgReq::clear_target_username() {
  target_username_.ClearToEmpty();
}
inline const std::string& ChatMsgReq::target_username() const {
  // @@protoc_insertion_point(field_get:CHATROOM.ChatMsgReq.target_username)
  return _internal_target_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMsgReq::set_target_username(ArgT0&& arg0, ArgT... args) {
 
 target_username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHATROOM.ChatMsgReq.target_username)
}
inline std::string* ChatMsgReq::mutable_target_username() {
  std::string* _s = _internal_mutable_target_username();
  // @@protoc_insertion_point(field_mutable:CHATROOM.ChatMsgReq.target_username)
  return _s;
}
inline const std::string& ChatMsgReq::_internal_target_username() const {
  return target_username_.Get();
}
inline void ChatMsgReq::_internal_set_target_username(const std::string& value) {
  
  target_username_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMsgReq::_internal_mutable_target_username() {
  
  return target_username_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMsgReq::release_target_username() {
  // @@protoc_insertion_point(field_release:CHATROOM.ChatMsgReq.target_username)
  return target_username_.Release();
}
inline void ChatMsgReq::set_allocated_target_username(std::string* target_username) {
  if (target_username != nullptr) {
    
  } else {
    
  }
  target_username_.SetAllocated(target_username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_username_.IsDefault()) {
    target_username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHATROOM.ChatMsgReq.target_username)
}

// -------------------------------------------------------------------

// ChatMsgRsp

// .CHATROOM.Message message = 1;
inline bool ChatMsgRsp::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ChatMsgRsp::has_message() const {
  return _internal_has_message();
}
inline void ChatMsgRsp::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::CHATROOM::Message& ChatMsgRsp::_internal_message() const {
  const ::CHATROOM::Message* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CHATROOM::Message&>(
      ::CHATROOM::_Message_default_instance_);
}
inline const ::CHATROOM::Message& ChatMsgRsp::message() const {
  // @@protoc_insertion_point(field_get:CHATROOM.ChatMsgRsp.message)
  return _internal_message();
}
inline void ChatMsgRsp::unsafe_arena_set_allocated_message(
    ::CHATROOM::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHATROOM.ChatMsgRsp.message)
}
inline ::CHATROOM::Message* ChatMsgRsp::release_message() {
  
  ::CHATROOM::Message* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CHATROOM::Message* ChatMsgRsp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CHATROOM.ChatMsgRsp.message)
  
  ::CHATROOM::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CHATROOM::Message* ChatMsgRsp::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CHATROOM::Message>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::CHATROOM::Message* ChatMsgRsp::mutable_message() {
  ::CHATROOM::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CHATROOM.ChatMsgRsp.message)
  return _msg;
}
inline void ChatMsgRsp::set_allocated_message(::CHATROOM::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CHATROOM.ChatMsgRsp.message)
}

// -------------------------------------------------------------------

// InitConnectReq

// string sender = 1;
inline void InitConnectReq::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& InitConnectReq::sender() const {
  // @@protoc_insertion_point(field_get:CHATROOM.InitConnectReq.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitConnectReq::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHATROOM.InitConnectReq.sender)
}
inline std::string* InitConnectReq::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:CHATROOM.InitConnectReq.sender)
  return _s;
}
inline const std::string& InitConnectReq::_internal_sender() const {
  return sender_.Get();
}
inline void InitConnectReq::_internal_set_sender(const std::string& value) {
  
  sender_.Set(value, GetArenaForAllocation());
}
inline std::string* InitConnectReq::_internal_mutable_sender() {
  
  return sender_.Mutable(GetArenaForAllocation());
}
inline std::string* InitConnectReq::release_sender() {
  // @@protoc_insertion_point(field_release:CHATROOM.InitConnectReq.sender)
  return sender_.Release();
}
inline void InitConnectReq::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault()) {
    sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHATROOM.InitConnectReq.sender)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CHATROOM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chatroom_2eproto
