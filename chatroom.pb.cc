// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatroom.proto

#include "chatroom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CHATROOM {
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR HistoryMsgRsp::HistoryMsgRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistoryMsgRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryMsgRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryMsgRspDefaultTypeInternal() {}
  union {
    HistoryMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryMsgRspDefaultTypeInternal _HistoryMsgRsp_default_instance_;
PROTOBUF_CONSTEXPR UserListRsp::UserListRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserListRspDefaultTypeInternal() {}
  union {
    UserListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserListRspDefaultTypeInternal _UserListRsp_default_instance_;
PROTOBUF_CONSTEXPR ChatMsgReq::ChatMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.msg_type_)*/0u
  , /*decltype(_impl_.is_private_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMsgReqDefaultTypeInternal() {}
  union {
    ChatMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMsgReqDefaultTypeInternal _ChatMsgReq_default_instance_;
PROTOBUF_CONSTEXPR ChatMsgRsp::ChatMsgRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMsgRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMsgRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMsgRspDefaultTypeInternal() {}
  union {
    ChatMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMsgRspDefaultTypeInternal _ChatMsgRsp_default_instance_;
PROTOBUF_CONSTEXPR InitConnectReq::InitConnectReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitConnectReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitConnectReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitConnectReqDefaultTypeInternal() {}
  union {
    InitConnectReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitConnectReqDefaultTypeInternal _InitConnectReq_default_instance_;
}  // namespace CHATROOM
static ::_pb::Metadata file_level_metadata_chatroom_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_chatroom_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chatroom_2eproto = nullptr;

const uint32_t TableStruct_chatroom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::Message, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::CHATROOM::Message, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::HistoryMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::HistoryMsgRsp, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::UserListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::UserListRsp, _impl_.user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::ChatMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::ChatMsgReq, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::CHATROOM::ChatMsgReq, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CHATROOM::ChatMsgReq, _impl_.is_private_),
  PROTOBUF_FIELD_OFFSET(::CHATROOM::ChatMsgReq, _impl_.target_username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::ChatMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::ChatMsgRsp, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::InitConnectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CHATROOM::InitConnectReq, _impl_.sender_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CHATROOM::Message)},
  { 8, -1, -1, sizeof(::CHATROOM::HistoryMsgRsp)},
  { 15, -1, -1, sizeof(::CHATROOM::UserListRsp)},
  { 22, -1, -1, sizeof(::CHATROOM::ChatMsgReq)},
  { 32, -1, -1, sizeof(::CHATROOM::ChatMsgRsp)},
  { 39, -1, -1, sizeof(::CHATROOM::InitConnectReq)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CHATROOM::_Message_default_instance_._instance,
  &::CHATROOM::_HistoryMsgRsp_default_instance_._instance,
  &::CHATROOM::_UserListRsp_default_instance_._instance,
  &::CHATROOM::_ChatMsgReq_default_instance_._instance,
  &::CHATROOM::_ChatMsgRsp_default_instance_._instance,
  &::CHATROOM::_InitConnectReq_default_instance_._instance,
};

const char descriptor_table_protodef_chatroom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016chatroom.proto\022\010CHATROOM\"*\n\007Message\022\016\n"
  "\006sender\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\"4\n\rHistor"
  "yMsgRsp\022#\n\010messages\030\001 \003(\0132\021.CHATROOM.Mes"
  "sage\" \n\013UserListRsp\022\021\n\tuser_name\030\001 \003(\t\"o"
  "\n\nChatMsgReq\022\020\n\010msg_type\030\001 \001(\r\022\"\n\007messag"
  "e\030\002 \001(\0132\021.CHATROOM.Message\022\022\n\nis_private"
  "\030\003 \001(\010\022\027\n\017target_username\030\004 \001(\t\"0\n\nChatM"
  "sgRsp\022\"\n\007message\030\001 \001(\0132\021.CHATROOM.Messag"
  "e\" \n\016InitConnectReq\022\016\n\006sender\030\001 \001(\tb\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_chatroom_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chatroom_2eproto = {
    false, false, 363, descriptor_table_protodef_chatroom_2eproto,
    "chatroom.proto",
    &descriptor_table_chatroom_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_chatroom_2eproto::offsets,
    file_level_metadata_chatroom_2eproto, file_level_enum_descriptors_chatroom_2eproto,
    file_level_service_descriptors_chatroom_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chatroom_2eproto_getter() {
  return &descriptor_table_chatroom_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chatroom_2eproto(&descriptor_table_chatroom_2eproto);
namespace CHATROOM {

// ===================================================================

class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CHATROOM.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CHATROOM.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:CHATROOM.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.content_.Destroy();
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CHATROOM.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CHATROOM.Message.sender"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CHATROOM.Message.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHATROOM.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CHATROOM.Message.sender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CHATROOM.Message.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHATROOM.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHATROOM.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CHATROOM.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHATROOM.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatroom_2eproto_getter, &descriptor_table_chatroom_2eproto_once,
      file_level_metadata_chatroom_2eproto[0]);
}

// ===================================================================

class HistoryMsgRsp::_Internal {
 public:
};

HistoryMsgRsp::HistoryMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CHATROOM.HistoryMsgRsp)
}
HistoryMsgRsp::HistoryMsgRsp(const HistoryMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistoryMsgRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHATROOM.HistoryMsgRsp)
}

inline void HistoryMsgRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HistoryMsgRsp::~HistoryMsgRsp() {
  // @@protoc_insertion_point(destructor:CHATROOM.HistoryMsgRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void HistoryMsgRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistoryMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CHATROOM.HistoryMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryMsgRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CHATROOM.Message messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHATROOM.HistoryMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CHATROOM.Message messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHATROOM.HistoryMsgRsp)
  return target;
}

size_t HistoryMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHATROOM.HistoryMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CHATROOM.Message messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistoryMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistoryMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistoryMsgRsp::GetClassData() const { return &_class_data_; }


void HistoryMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistoryMsgRsp*>(&to_msg);
  auto& from = static_cast<const HistoryMsgRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CHATROOM.HistoryMsgRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistoryMsgRsp::CopyFrom(const HistoryMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHATROOM.HistoryMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMsgRsp::IsInitialized() const {
  return true;
}

void HistoryMsgRsp::InternalSwap(HistoryMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryMsgRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatroom_2eproto_getter, &descriptor_table_chatroom_2eproto_once,
      file_level_metadata_chatroom_2eproto[1]);
}

// ===================================================================

class UserListRsp::_Internal {
 public:
};

UserListRsp::UserListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CHATROOM.UserListRsp)
}
UserListRsp::UserListRsp(const UserListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserListRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){from._impl_.user_name_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CHATROOM.UserListRsp)
}

inline void UserListRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserListRsp::~UserListRsp() {
  // @@protoc_insertion_point(destructor:CHATROOM.UserListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.~RepeatedPtrField();
}

void UserListRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CHATROOM.UserListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "CHATROOM.UserListRsp.user_name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHATROOM.UserListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string user_name = 1;
  for (int i = 0, n = this->_internal_user_name_size(); i < n; i++) {
    const auto& s = this->_internal_user_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CHATROOM.UserListRsp.user_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHATROOM.UserListRsp)
  return target;
}

size_t UserListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHATROOM.UserListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_name_.size());
  for (int i = 0, n = _impl_.user_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserListRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserListRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserListRsp::GetClassData() const { return &_class_data_; }


void UserListRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserListRsp*>(&to_msg);
  auto& from = static_cast<const UserListRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CHATROOM.UserListRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_name_.MergeFrom(from._impl_.user_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserListRsp::CopyFrom(const UserListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHATROOM.UserListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListRsp::IsInitialized() const {
  return true;
}

void UserListRsp::InternalSwap(UserListRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_name_.InternalSwap(&other->_impl_.user_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserListRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatroom_2eproto_getter, &descriptor_table_chatroom_2eproto_once,
      file_level_metadata_chatroom_2eproto[2]);
}

// ===================================================================

class ChatMsgReq::_Internal {
 public:
  static const ::CHATROOM::Message& message(const ChatMsgReq* msg);
};

const ::CHATROOM::Message&
ChatMsgReq::_Internal::message(const ChatMsgReq* msg) {
  return *msg->_impl_.message_;
}
ChatMsgReq::ChatMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CHATROOM.ChatMsgReq)
}
ChatMsgReq::ChatMsgReq(const ChatMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_username_){}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.is_private_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_username().empty()) {
    _this->_impl_.target_username_.Set(from._internal_target_username(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::CHATROOM::Message(*from._impl_.message_);
  }
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_private_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.is_private_));
  // @@protoc_insertion_point(copy_constructor:CHATROOM.ChatMsgReq)
}

inline void ChatMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_username_){}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.msg_type_){0u}
    , decltype(_impl_.is_private_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMsgReq::~ChatMsgReq() {
  // @@protoc_insertion_point(destructor:CHATROOM.ChatMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_username_.Destroy();
  if (this != internal_default_instance()) delete _impl_.message_;
}

void ChatMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CHATROOM.ChatMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_private_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.is_private_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CHATROOM.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_private = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target_username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CHATROOM.ChatMsgReq.target_username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHATROOM.ChatMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // .CHATROOM.Message message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // bool is_private = 3;
  if (this->_internal_is_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_private(), target);
  }

  // string target_username = 4;
  if (!this->_internal_target_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_username().data(), static_cast<int>(this->_internal_target_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CHATROOM.ChatMsgReq.target_username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHATROOM.ChatMsgReq)
  return target;
}

size_t ChatMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHATROOM.ChatMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_username = 4;
  if (!this->_internal_target_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_username());
  }

  // .CHATROOM.Message message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // uint32 msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_type());
  }

  // bool is_private = 3;
  if (this->_internal_is_private() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMsgReq::GetClassData() const { return &_class_data_; }


void ChatMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMsgReq*>(&to_msg);
  auto& from = static_cast<const ChatMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CHATROOM.ChatMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_username().empty()) {
    _this->_internal_set_target_username(from._internal_target_username());
  }
  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::CHATROOM::Message::MergeFrom(
        from._internal_message());
  }
  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_is_private() != 0) {
    _this->_internal_set_is_private(from._internal_is_private());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMsgReq::CopyFrom(const ChatMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHATROOM.ChatMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgReq::IsInitialized() const {
  return true;
}

void ChatMsgReq::InternalSwap(ChatMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_username_, lhs_arena,
      &other->_impl_.target_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMsgReq, _impl_.is_private_)
      + sizeof(ChatMsgReq::_impl_.is_private_)
      - PROTOBUF_FIELD_OFFSET(ChatMsgReq, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatroom_2eproto_getter, &descriptor_table_chatroom_2eproto_once,
      file_level_metadata_chatroom_2eproto[3]);
}

// ===================================================================

class ChatMsgRsp::_Internal {
 public:
  static const ::CHATROOM::Message& message(const ChatMsgRsp* msg);
};

const ::CHATROOM::Message&
ChatMsgRsp::_Internal::message(const ChatMsgRsp* msg) {
  return *msg->_impl_.message_;
}
ChatMsgRsp::ChatMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CHATROOM.ChatMsgRsp)
}
ChatMsgRsp::ChatMsgRsp(const ChatMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMsgRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::CHATROOM::Message(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:CHATROOM.ChatMsgRsp)
}

inline void ChatMsgRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatMsgRsp::~ChatMsgRsp() {
  // @@protoc_insertion_point(destructor:CHATROOM.ChatMsgRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void ChatMsgRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CHATROOM.ChatMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMsgRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CHATROOM.Message message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHATROOM.ChatMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CHATROOM.Message message = 1;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHATROOM.ChatMsgRsp)
  return target;
}

size_t ChatMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHATROOM.ChatMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CHATROOM.Message message = 1;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMsgRsp::GetClassData() const { return &_class_data_; }


void ChatMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMsgRsp*>(&to_msg);
  auto& from = static_cast<const ChatMsgRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CHATROOM.ChatMsgRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::CHATROOM::Message::MergeFrom(
        from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMsgRsp::CopyFrom(const ChatMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHATROOM.ChatMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgRsp::IsInitialized() const {
  return true;
}

void ChatMsgRsp::InternalSwap(ChatMsgRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMsgRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatroom_2eproto_getter, &descriptor_table_chatroom_2eproto_once,
      file_level_metadata_chatroom_2eproto[4]);
}

// ===================================================================

class InitConnectReq::_Internal {
 public:
};

InitConnectReq::InitConnectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CHATROOM.InitConnectReq)
}
InitConnectReq::InitConnectReq(const InitConnectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitConnectReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CHATROOM.InitConnectReq)
}

inline void InitConnectReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InitConnectReq::~InitConnectReq() {
  // @@protoc_insertion_point(destructor:CHATROOM.InitConnectReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitConnectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
}

void InitConnectReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitConnectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CHATROOM.InitConnectReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitConnectReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CHATROOM.InitConnectReq.sender"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitConnectReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHATROOM.InitConnectReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CHATROOM.InitConnectReq.sender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHATROOM.InitConnectReq)
  return target;
}

size_t InitConnectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHATROOM.InitConnectReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitConnectReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitConnectReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitConnectReq::GetClassData() const { return &_class_data_; }


void InitConnectReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitConnectReq*>(&to_msg);
  auto& from = static_cast<const InitConnectReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CHATROOM.InitConnectReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitConnectReq::CopyFrom(const InitConnectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHATROOM.InitConnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitConnectReq::IsInitialized() const {
  return true;
}

void InitConnectReq::InternalSwap(InitConnectReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitConnectReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatroom_2eproto_getter, &descriptor_table_chatroom_2eproto_once,
      file_level_metadata_chatroom_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CHATROOM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CHATROOM::Message*
Arena::CreateMaybeMessage< ::CHATROOM::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHATROOM::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::CHATROOM::HistoryMsgRsp*
Arena::CreateMaybeMessage< ::CHATROOM::HistoryMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHATROOM::HistoryMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CHATROOM::UserListRsp*
Arena::CreateMaybeMessage< ::CHATROOM::UserListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHATROOM::UserListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CHATROOM::ChatMsgReq*
Arena::CreateMaybeMessage< ::CHATROOM::ChatMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHATROOM::ChatMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CHATROOM::ChatMsgRsp*
Arena::CreateMaybeMessage< ::CHATROOM::ChatMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHATROOM::ChatMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CHATROOM::InitConnectReq*
Arena::CreateMaybeMessage< ::CHATROOM::InitConnectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CHATROOM::InitConnectReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
